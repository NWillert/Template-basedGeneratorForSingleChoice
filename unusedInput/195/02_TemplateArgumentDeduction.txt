@NAME
Template Argument Deduction
@AUTHOR
Janik Eriksson
@DATE
15.06.2022
@VERSION
1
@DESCRIPTION
Decide which function or function template gets instantiated.
@TAXONOMY
12
@CODE
#include <utility>
using namespace std;

pair<int, int> makePair(int i)
{
    return make_pair(i, i);
}

template <typename T>
pair<T, T> makePair(T t)
{
    return make_pair(t, t);
}

int main ()
{
    auto a {makePair(5)};
    auto b {makePair<>(8)};
    auto c {makePair("hello")};
    return 0;
}
@TASK
Which statement regarding the program is $ccorrect$/c?
@TRUE
Because of the statement in line 19, the function template makePair<>() gets instantiated for string.
The statement in line 18 results in the instantiation of the function template for int.
@FALSE
Because of the statement in line 17, the function template makePair<>() gets instantiated for int.
The statement in line 19 causes the program to fail at runtime, because there is no function called makePair() that takes a string as parameter.
The program does not compile because there is no type specified in the angle brackets in line 18.
The statement in line 18 results in a call to the function makePair() because the compiler detects that the instantiation of the function template is not necessary.
@EXCLUSIONS
